axis.text.x = element_blank())
eData %>%
mutate(`sex:group` = interaction(sex, group, sep=":")) %>%
ggplot(aes(x = sex:group,
y = dep_slope,
colour = sex:group)) +
geom_jitter(width = .3) +
geom_boxplot(width = .3, alpha = .2) +
labs(y = "Depression difference",
title = "Depression difference between baseline and EOS",
subtitle = "Divided by intervention group and sex"
) +
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
plot.background = element_blank())
eData %>%
mutate(`sex:group` = interaction(sex, group, sep=":")) %>%
ggplot(aes(x = sex:group,
y = dep_slope,
colour = sex:group)) +
geom_jitter(width = .2) +
geom_boxplot(width = .3, alpha = .2) +
labs(y = "Depression difference",
title = "Depression difference between baseline and EOS",
subtitle = "Divided by intervention group and sex"
) +
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank())
ggplot(eData, aes(x = depress1)) +
geom_density()
ggplot(eData, aes(x = depress1)) +
geom_histogram()
ggplot(eData, aes(x = depress1)) +
geom_histogram(bins = 50)
ggplot(eData, aes(x = depress1)) +
geom_density()
model_1_lm
library(broom)
# tidy() gets model outputs we usually use to report our results
model_1_t_tidy <- tidy(model_1_t) %>% mutate(model = "t.test(y)")
library(tidyverse)
library(knitr)
library(kableExtra)
kable <- function(data) {
knitr::kable(data, digits = 3)
}
blogdown::shortcode("tweet", "1259586040219594753")
tab <- tribble(~formula, ~tests, ~`read as`,
"y ~ x", "main effect of x on y", "y predicted by x",
"y ~ x + z", "main effects of x and z on y", "y predicted by both x and z",
"y ~ x:z", "interaction of x and z on y", "y predicted by the interaction of x and z",
"y ~ x + z + x:z", "main and interaction effects of x and z on y", "y predicted by x and z, as well as their interaction",
"y ~ x * z", "main and interaction effects of x and z on y", "y predicted by x and z, as well as their interaction"
) %>%
kable() %>%
collapse_rows(2:3)
tab
# Start with importing the SPSS data
# then recode sex to Male and Female
# and make id a factor (categorical)
# then make group a factor
eData = rio::import("experim.sav") %>%
mutate(
sex = factor(sex, labels=c("Male","Female")),
id = factor(id),
group = factor(group)
)
# Look at it
tibble(eData)
# Run t-test
model_1_t <- t.test(eData$depress1)
model_1_t
# Run equivalent linear model
model_1_lm <- lm(depress1 ~ 1, data = eData)
summary(model_1_lm)
model_1_lm
resid(model_1_lm)
resid(model_1_lm) %>%
as_tibble()
resid(model_1_lm) %>%
as_tibble() %>%
ggplot(aes(x = value)) +
geom_density()
resid(model_1_lm) %>%
as_tibble() %>%
ggplot(aes(x = value)) +
geom_density() +
geom_vline(xintercept = 0, lty = "dashed")
results <- bind_rows(model_1_t_tidy, model_1_lm_tidy)%>%
select(model, estimate, statistic, p.value)
# tidy() gets model outputs we usually use to report our results
model_1_t_tidy <- tidy(model_1_t) %>% mutate(model = "t.test(y)")
model_1_lm_tidy <- tidy(model_1_lm) %>% mutate(model = "lm(y ~ 1)")
results <- bind_rows(model_1_t_tidy, model_1_lm_tidy)%>%
select(model, estimate, statistic, p.value)
results
library(tidyverse)
library(knitr)
library(kableExtra)
kable <- function(data) {
knitr::kable(data, digits = 3)
}
blogdown::shortcode("tweet", "1259586040219594753")
tab <- tribble(~formula, ~tests, ~`read as`,
"y ~ x", "main effect of x on y", "y predicted by x",
"y ~ x + z", "main effects of x and z on y", "y predicted by both x and z",
"y ~ x:z", "interaction of x and z on y", "y predicted by the interaction of x and z",
"y ~ x + z + x:z", "main and interaction effects of x and z on y", "y predicted by x and z, as well as their interaction",
"y ~ x * z", "main and interaction effects of x and z on y", "y predicted by x and z, as well as their interaction"
) %>%
kable() %>%
collapse_rows(2:3)
tab
# Start with importing the SPSS data
# then recode sex to Male and Female
# and make id a factor (categorical)
# then make group a factor
eData = rio::import("experim.sav") %>%
mutate(
sex = factor(sex, labels=c("Male","Female")),
id = factor(id),
group = factor(group)
)
# Look at it
tibble(eData)
# Run t-test
model_1_t <- t.test(eData$depress1)
model_1_t
# Run equivalent linear model
model_1_lm <- lm(depress1 ~ 1, data = eData)
summary(model_1_lm)
library(broom)
# tidy() gets model outputs we usually use to report our results
model_1_t_tidy <- tidy(model_1_t) %>% mutate(model = "t.test(y)")
model_1_lm_tidy <- tidy(model_1_lm) %>% mutate(model = "lm(y ~ 1)")
results <- bind_rows(model_1_t_tidy, model_1_lm_tidy)%>%
select(model, estimate, statistic, p.value)
kable(results) %>%
collapse_rows(1)
# split groups into two data-sets for t-test
g1 <- filter(eData, group == 1)
g2 <- filter(eData, group == 2)
# run paired t-test testing depression from g1 against g2
model_2_t <- t.test(g1$depress1, g2$depress1, paired = TRUE)
model_2_t_tidy <- tidy(model_2_t) %>% mutate(model = "t.test(x, y, paired = TRUE")
model_2_t
# run linear model
model_2_lm <- lm(g1$depress1-g2$depress1 ~ 1)
model_2_lm_tidy <- tidy(model_2_lm) %>% mutate(model = "lm(y-x ~ 1)")
summary(model_2_lm)
# we combine the two model outputs, rowwise
results <- bind_rows(model_2_t_tidy, model_2_lm_tidy) %>%
select(model, estimate, statistic, p.value)
kable(results) %>%
collapse_rows(1)
# Run correlation test
model_3_cor <- cor.test(g1$depress1, g2$depress1, method = "pearson")
model_3_cor_tidy <- tidy(model_3_cor) %>% mutate(model = "cor.test(x, y)")
model_3_cor
# Run equivalent linear model
model_3_lm <- lm(g1$depress1 ~ g2$depress1)
model_3_lm_tidy <- tidy(model_3_lm) %>% mutate(model = "lm(y ~ x)")
summary(model_3_lm)
# we combine the two model outputs, rowwise
results <- bind_rows(model_3_cor_tidy, model_3_lm_tidy) %>%
select(model, term, estimate, statistic, p.value)
kable(results) %>%
collapse_rows(1)
eData <- eData %>%
mutate(
dep_slope = depress1 - depress3
)
# Run one-way anova
model_4_anova <- aov(dep_slope ~ group, data = eData)
model_4_anova_tidy <- tidy(model_4_anova) %>% mutate(model = "aov(y ~ x)")
summary(model_4_anova)
# Run equivalent linear model
model_4_lm <- lm(dep_slope ~ group, data = eData)
model_4_lm_tidy <- tidy(model_4_lm) %>% mutate(model = "lm(y ~ x)")
summary(model_4_lm)
# we combine the two model outputs, rowwise
results <- bind_rows(model_4_anova_tidy, model_4_lm_tidy) %>%
select(model, term, estimate, statistic, p.value)
kable(results) %>%
collapse_rows(1)
# Run one-way anova
model_5_ancova <- aov(dep_slope ~ group + confid1, data = eData)
model_5_ancova_tidy <- tidy(model_5_ancova) %>% mutate(model = "aov(y ~ x + z)")
summary(model_5_ancova)
# Run equivalent linear model
model_5_lm <- lm(dep_slope ~ group + confid1, data = eData)
model_5_lm_tidy <- tidy(model_5_lm) %>% mutate(model = "lm(y ~ x + z)")
summary(model_5_lm)
# we combine the two model outputs, rowwise
results <- bind_rows(model_5_ancova_tidy, model_5_lm_tidy) %>%
select(model, term, estimate, statistic, p.value)
ggplot(eData,
aes(y = dep_slope,
x = confid1,
group = sex,
colour = sex)) +
geom_jitter() +
geom_smooth(method = "lm")
library(tidyverse)
library(knitr)
library(kableExtra)
kable <- function(data) {
knitr::kable(data, digits = 3)
}
blogdown::shortcode("tweet", "1259586040219594753")
tab <- tribble(~formula, ~tests, ~`read as`,
"y ~ x", "main effect of x on y", "y predicted by x",
"y ~ x + z", "main effects of x and z on y", "y predicted by both x and z",
"y ~ x:z", "interaction of x and z on y", "y predicted by the interaction of x and z",
"y ~ x + z + x:z", "main and interaction effects of x and z on y", "y predicted by x and z, as well as their interaction",
"y ~ x * z", "main and interaction effects of x and z on y", "y predicted by x and z, as well as their interaction"
) %>%
kable() %>%
collapse_rows(2:3)
tab
# Start with importing the SPSS data
# then recode sex to Male and Female
# and make id a factor (categorical)
# then make group a factor
eData = rio::import("experim.sav") %>%
mutate(
sex = factor(sex, labels=c("Male","Female")),
id = factor(id),
group = factor(group)
)
# Look at it
tibble(eData)
# Run t-test
model_1_t <- t.test(eData$depress1)
model_1_t
# Run equivalent linear model
model_1_lm <- lm(depress1 ~ 1, data = eData)
summary(model_1_lm)
library(broom)
# tidy() gets model outputs we usually use to report our results
model_1_t_tidy <- tidy(model_1_t) %>% mutate(model = "t.test(y)")
model_1_lm_tidy <- tidy(model_1_lm) %>% mutate(model = "lm(y ~ 1)")
results <- bind_rows(model_1_t_tidy, model_1_lm_tidy)%>%
select(model, estimate, statistic, p.value)
kable(results) %>%
collapse_rows(1)
# split groups into two data-sets for t-test
g1 <- filter(eData, group == 1)
g2 <- filter(eData, group == 2)
# run paired t-test testing depression from g1 against g2
model_2_t <- t.test(g1$depress1, g2$depress1, paired = TRUE)
model_2_t_tidy <- tidy(model_2_t) %>% mutate(model = "t.test(x, y, paired = TRUE")
model_2_t
# run linear model
model_2_lm <- lm(g1$depress1-g2$depress1 ~ 1)
model_2_lm_tidy <- tidy(model_2_lm) %>% mutate(model = "lm(y-x ~ 1)")
summary(model_2_lm)
# we combine the two model outputs, rowwise
results <- bind_rows(model_2_t_tidy, model_2_lm_tidy) %>%
select(model, estimate, statistic, p.value)
kable(results) %>%
collapse_rows(1)
# Run correlation test
model_3_cor <- cor.test(g1$depress1, g2$depress1, method = "pearson")
model_3_cor_tidy <- tidy(model_3_cor) %>% mutate(model = "cor.test(x, y)")
model_3_cor
# Run equivalent linear model
model_3_lm <- lm(g1$depress1 ~ g2$depress1)
model_3_lm_tidy <- tidy(model_3_lm) %>% mutate(model = "lm(y ~ x)")
summary(model_3_lm)
# we combine the two model outputs, rowwise
results <- bind_rows(model_3_cor_tidy, model_3_lm_tidy) %>%
select(model, term, estimate, statistic, p.value)
kable(results) %>%
collapse_rows(1)
eData <- eData %>%
mutate(
dep_slope = depress1 - depress3
)
# Run one-way anova
model_4_anova <- aov(dep_slope ~ group, data = eData)
model_4_anova_tidy <- tidy(model_4_anova) %>% mutate(model = "aov(y ~ x)")
summary(model_4_anova)
# Run equivalent linear model
model_4_lm <- lm(dep_slope ~ group, data = eData)
model_4_lm_tidy <- tidy(model_4_lm) %>% mutate(model = "lm(y ~ x)")
summary(model_4_lm)
# we combine the two model outputs, rowwise
results <- bind_rows(model_4_anova_tidy, model_4_lm_tidy) %>%
select(model, term, estimate, statistic, p.value)
kable(results) %>%
collapse_rows(1)
# Run one-way anova
model_5_ancova <- aov(dep_slope ~ group + confid1, data = eData)
model_5_ancova_tidy <- tidy(model_5_ancova) %>% mutate(model = "aov(y ~ x + z)")
summary(model_5_ancova)
# Run equivalent linear model
model_5_lm <- lm(dep_slope ~ group + confid1, data = eData)
model_5_lm_tidy <- tidy(model_5_lm) %>% mutate(model = "lm(y ~ x + z)")
summary(model_5_lm)
# we combine the two model outputs, rowwise
results <- bind_rows(model_5_ancova_tidy, model_5_lm_tidy) %>%
select(model, term, estimate, statistic, p.value)
kable(results) %>%
collapse_rows(1)
# Run anova
model_6_anova <- aov(dep_slope ~ group * sex, data = eData)
model_6_anova_tidy <- tidy(model_6_anova) %>% mutate(model = "aov(y ~ x * z)")
summary(model_6_anova)
# Run equivalent linear model
model_6_lm <- lm(dep_slope ~ group * sex, data = eData)
model_6_lm_tidy <- tidy(model_6_lm) %>% mutate(model = "lm(y ~ x * z)")
summary(model_6_lm)
# we combine the two model outputs, rowwise
results <- bind_rows(model_6_anova_tidy, model_6_lm_tidy) %>%
select(model, term, estimate, statistic, p.value)
kable(results) %>%
collapse_rows(1)
eData_mock <- eData %>%
# Add 2 to numeric version of groups
mutate(group = as.numeric(group)+2) %>%
# bind this by row to the origincal eData (with group as numeric)
bind_rows(eData %>%
mutate(group = as.numeric(group))) %>%
# make group a factor again so the correct test is applied
mutate(group = as.factor(group))
# Run  anova
model_7_anova <- aov(dep_slope ~ group * sex, data = eData_mock)
model_7_anova_tidy <- tidy(model_7_anova) %>% mutate(model = "aov(y ~ x * z)")
summary(model_7_anova)
# Run equivalent linear model
model_7_lm <- lm(dep_slope ~ group * sex, data = eData_mock)
model_7_lm_tidy <- tidy(model_7_lm) %>% mutate(model = "lm(y ~ x * z)")
summary(model_7_lm)
# we combine the two model outputs, rowwise
results <- bind_rows(model_7_anova_tidy, model_7_lm_tidy) %>%
select(model, term, estimate, statistic, p.value)
ggplot(eData,
aes(y = depress1,
x = depress3)) +
geom_jitter() +
geom_smooth(method = "lm")
simple_plots[[1]] <- ggplot(eData,
aes(y = depress1,
x = depress3)) +
geom_jitter() +
geom_smooth(method = "lm", formula = y-x~1)
simple_plots <- list()
ggplot(eData,
aes(y = depress1,
x = depress3)) +
geom_jitter() +
geom_smooth(method = "lm", formula = y-x~1)
ggplot(eData,
aes(y = depress1,
x = depress3)) +
geom_smooth(method = "lm", formula = y-x~1)
simple_plots[[1]] <- ggplot(eData,
aes(y = depress1,
x = depress3)) +
geom_smooth(method = "lm", formula = x-y~1)
ggplot(eData,
aes(y = depress1,
x = depress3)) +
geom_smooth(method = "lm", formula = x-y~1)
simple_plots[[1]] <- ggplot(eData,
aes(y = depress1,
x = depress3)) +
geom_smooth(method = "lm", formula = x-y~1) +
labs(title = "Paired-samples t-test",
subtitle = "Difference between depression 1 and 3")
ggplot(eData,
aes(y = depress1,
x = depress3)) +
geom_smooth(method = "lm", formula = x-y~1) +
labs(title = "Paired-samples t-test",
subtitle = "Difference between depression 1 and 3")
# run paired t-test testing depression from g1 against g2
model_2_t <- t.test(eData$depress1, eData$depress3, paired = TRUE)
model_2_t_tidy <- tidy(model_2_t) %>% mutate(model = "t.test(x, y, paired = TRUE")
model_2_t
# run linear model
model_2_lm <- lm(depress1 - depress3 ~ 1, data = eData)
model_2_lm_tidy <- tidy(model_2_lm) %>% mutate(model = "lm(y-x ~ 1)")
summary(model_2_lm)
# we combine the two model outputs, rowwise
results <- bind_rows(model_2_t_tidy, model_2_lm_tidy) %>%
select(model, estimate, statistic, p.value)
results
# run linear model
model_2_lm <- lm(depress3 - depress1 ~ 1, data = eData)
model_2_lm_tidy <- tidy(model_2_lm) %>% mutate(model = "lm(x-y ~ 1)")
summary(model_2_lm)
# we combine the two model outputs, rowwise
results <- bind_rows(model_2_t_tidy, model_2_lm_tidy) %>%
select(model, estimate, statistic, p.value)
results
# run linear model
model_2_lm <- lm(depress1 - depress3 ~ 1, data = eData)
model_2_lm_tidy <- tidy(model_2_lm) %>% mutate(model = "lm(y-x ~ 1)")
summary(model_2_lm)
# we combine the two model outputs, rowwise
results <- bind_rows(model_2_t_tidy, model_2_lm_tidy) %>%
select(model, estimate, statistic, p.value)
results
model_2_lm2 <- lm(dep_slope ~ 1, data = eData)
model_2_lm2_tidy <- tidy(model_2_lm2) %>% mutate(model = "lm(y ~ 1)")
# we combine the two model outputs, rowwise
results <- bind_rows(model_2_t_tidy, model_2_lm_tidy) %>%
bind_rows(model_2_lm2_tidy)%>%
select(model, estimate, statistic, p.value)
results
# Run one-way anova
model_4_anova <- aov(depress1 ~ group, data = eData)
model_4_anova_tidy <- tidy(model_4_anova) %>% mutate(model = "aov(y ~ x)")
summary(model_4_anova)
# Run equivalent linear model
model_4_lm <- lm(depress1 ~ group, data = eData)
model_4_lm_tidy <- tidy(model_4_lm) %>% mutate(model = "lm(y ~ factor(x))")
summary(model_4_lm)
# we combine the two model outputs, rowwise
results <- bind_rows(model_4_anova_tidy, model_4_lm_tidy) %>%
select(model, term, estimate, statistic, p.value)
results
kable(results) %>%
collapse_rows(1)
install.packages("ISOcodes")
library(tidyverse)
library(knitr)
library(kableExtra)
kable <- function(data) {
knitr::kable(data, digits = 3)
}
blogdown::shortcode("tweet", "1259586040219594753")
tab <- tribble(~formula, ~tests, ~`read as`,
"y ~ x", "main effect of x on y", "y predicted by x",
"y ~ x + z", "main effects of x and z on y", "y predicted by both x and z",
"y ~ x:z", "interaction of x and z on y", "y predicted by the interaction of x and z",
"y ~ x + z + x:z", "main and interaction effects of x and z on y", "y predicted by x and z, as well as their interaction",
"y ~ x * z", "main and interaction effects of x and z on y", "y predicted by x and z, as well as their interaction"
) %>%
kable() %>%
collapse_rows(2:3)
tab
# Start with importing the SPSS data
# then recode sex to Male and Female
# and make id a factor (categorical)
# then make group a factor
eData = rio::import("experim.sav") %>%
mutate(
sex = factor(sex, labels=c("Male","Female")),
id = factor(id),
group = factor(group)
)
# Look at it
tibble(eData)
# Run t-test
model_1_t <- t.test(eData$depress1)
model_1_t
# Run equivalent linear model
model_1_lm <- lm(depress1 ~ 1, data = eData)
summary(model_1_lm)
library(broom)
# tidy() gets model outputs we usually use to report our results
model_1_t_tidy <- tidy(model_1_t) %>% mutate(model = "t.test(y)")
model_1_lm_tidy <- tidy(model_1_lm) %>% mutate(model = "lm(y ~ 1)")
results <- bind_rows(model_1_t_tidy, model_1_lm_tidy)%>%
select(model, estimate, statistic, p.value)
kable(results) %>%
collapse_rows(1)
# run paired t-test testing depression from g1 against g2
model_2_t <- t.test(eData$depress1, eData$depress3, paired = TRUE)
model_2_t_tidy <- tidy(model_2_t) %>% mutate(model = "t.test(x, y, paired = TRUE")
model_2_t
# run linear model
model_2_lm <- lm(depress1 - depress3 ~ 1, data = eData)
model_2_lm_tidy <- tidy(model_2_lm) %>% mutate(model = "lm(y-x ~ 1)")
summary(model_2_lm)
# we combine the two model outputs, rowwise
results <- bind_rows(model_2_t_tidy, model_2_lm_tidy) %>%
select(model, estimate, statistic, p.value)
kable(results) %>%
collapse_rows(1)
# calculate the difference between baseline and tp3 depression
eData <- eData %>%
mutate(
dep_slope = depress1 - depress3
)
model_2_lm2 <- lm(dep_slope ~ 1, data = eData)
model_2_lm2_tidy <- tidy(model_2_lm2) %>% mutate(model = "lm(y ~ 1)")
# we combine the three model outputs, rowwise
results <- bind_rows(model_2_t_tidy, model_2_lm_tidy) %>%
bind_rows(model_2_lm2_tidy)%>%
select(model, estimate, statistic, p.value)
kable(results) %>%
collapse_rows(1)
# Run correlation test
model_3_cor <- cor.test(eData$depress3, eData$depress1, method = "pearson")
model_3_cor_tidy <- tidy(model_3_cor) %>% mutate(model = "cor.test(x, y)")
model_3_cor
# Run equivalent linear model
model_3_lm <- lm(depress3 ~ depress1, data = eData)
model_3_lm_tidy <- tidy(model_3_lm) %>% mutate(model = "lm(y ~ x)")
summary(model_3_lm)
# we combine the two model outputs, rowwise
results <- bind_rows(model_3_cor_tidy, model_3_lm_tidy) %>%
select(model, term, estimate, statistic, p.value)
kable(results) %>%
collapse_rows(1)
-1.687+0.961
